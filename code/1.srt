1
00:00:00,000 --> 00:00:03,000
everyone I've been getting some

2
00:00:01,000 --> 00:00:05,000
questions about using react query and

3
00:00:03,000 --> 00:00:08,000
trpc in the latest nextjs so I

4
00:00:05,000 --> 00:00:10,000
personally do not use react query or

5
00:00:08,000 --> 00:00:11,000
trpc anymore and in this video I want to

6
00:00:10,000 --> 00:00:13,000
explain why I don't have anything

7
00:00:11,000 --> 00:00:16,000
against these tools in principle I think

8
00:00:13,000 --> 00:00:17,000
they're still very useful outside nextjs

9
00:00:16,000 --> 00:00:19,000
and I also think that the people who

10
00:00:17,000 --> 00:00:20,000
build them and maintain them are very

11
00:00:19,000 --> 00:00:22,000
talented people let's actually take a

12
00:00:20,000 --> 00:00:24,000
look at why I don't use them anymore so

13
00:00:22,000 --> 00:00:26,000
I'm going to use this remote Dev project

14
00:00:24,000 --> 00:00:28,000
that is from my reacted next escore some

15
00:00:26,000 --> 00:00:30,000
of you will recognize it and here we are

16
00:00:28,000 --> 00:00:32,000
actually doing some data fetch so let's

17
00:00:30,000 --> 00:00:33,000
actually start with react query so the

18
00:00:32,000 --> 00:00:35,000
user can search for something and then

19
00:00:33,000 --> 00:00:37,000
we get a list of results and the user

20
00:00:35,000 --> 00:00:38,000
can click on one of those results to get

21
00:00:37,000 --> 00:00:40,000
the detail right so here I clicked on

22
00:00:38,000 --> 00:00:42,000
the at security so that's what we see

23
00:00:40,000 --> 00:00:44,000
here let me actually zoom in a little

24
00:00:42,000 --> 00:00:46,000
bit so you can see here that I can click

25
00:00:44,000 --> 00:00:49,000
around and every time I click on one of

26
00:00:46,000 --> 00:00:51,000
them we are loading the actual details

27
00:00:49,000 --> 00:00:53,000
of that particular job item right very

28
00:00:51,000 --> 00:00:55,000
standard very typical situation here I'm

29
00:00:53,000 --> 00:00:57,000
using the same image for all of them by

30
00:00:55,000 --> 00:00:58,000
the way so don't be confused they are

31
00:00:57,000 --> 00:01:00,000
actually different right so you can see

32
00:00:58,000 --> 00:01:02,000
the title here is front end devel veler

33
00:01:00,000 --> 00:01:04,000
react and the company name at security

34
00:01:02,000 --> 00:01:06,000
here the company name is Asen as so you

35
00:01:04,000 --> 00:01:07,000
can see we're we're loading the relevant

36
00:01:06,000 --> 00:01:09,000
details for the one that we clicked and

37
00:01:07,000 --> 00:01:11,000
when I look in the network tab you can

38
00:01:09,000 --> 00:01:13,000
also see that whenever I click on one of

39
00:01:11,000 --> 00:01:15,000
them there is a new network request so

40
00:01:13,000 --> 00:01:16,000
the data is being Fetch and most

41
00:01:15,000 --> 00:01:18,000
importantly when I click on one that we

42
00:01:16,000 --> 00:01:20,000
already saw there is a new network

43
00:01:18,000 --> 00:01:21,000
request all right so how would we

44
00:01:20,000 --> 00:01:23,000
implement this well traditionally

45
00:01:21,000 --> 00:01:25,000
without react query you would have the

46
00:01:23,000 --> 00:01:26,000
typical use effect right so you would

47
00:01:25,000 --> 00:01:29,000
use use effect and then you can use the

48
00:01:26,000 --> 00:01:32,000
fetch API to actually fetch the relevant

49
00:01:29,000 --> 00:01:34,000
uh job item details right based on the

50
00:01:32,000 --> 00:01:36,000
ID that we get here we're going to set

51
00:01:34,000 --> 00:01:38,000
the loading is to set to true and

52
00:01:36,000 --> 00:01:40,000
ultimately we get the data so we store

53
00:01:38,000 --> 00:01:41,000
that in state and then here with is

54
00:01:40,000 --> 00:01:43,000
loading we're setting that back to false

55
00:01:41,000 --> 00:01:45,000
again right this is basically how you

56
00:01:43,000 --> 00:01:47,000
learn react initially right so you have

57
00:01:45,000 --> 00:01:49,000
use effect and that's how you fetch data

58
00:01:47,000 --> 00:01:51,000
the downside of this is now if I click

59
00:01:49,000 --> 00:01:53,000
on the first one you can see there is a

60
00:01:51,000 --> 00:01:55,000
network request if I click on the second

61
00:01:53,000 --> 00:01:57,000
one there is a new network request what

62
00:01:55,000 --> 00:01:59,000
happens if I now go back to the first

63
00:01:57,000 --> 00:02:00,000
one the one that we just fetched if I

64
00:01:59,000 --> 00:02:02,000
click on the first first one there is a

65
00:02:00,000 --> 00:02:04,000
new network request there is no caching

66
00:02:02,000 --> 00:02:06,000
and when I go back to the second one

67
00:02:04,000 --> 00:02:08,000
there is a new network request we see a

68
00:02:06,000 --> 00:02:11,000
loading State there is zero caching so

69
00:02:08,000 --> 00:02:13,000
literally every time we click on one of

70
00:02:11,000 --> 00:02:15,000
them there is a new network request and

71
00:02:13,000 --> 00:02:16,000
that is very inefficient right because

72
00:02:15,000 --> 00:02:19,000
why are we making a new network request

73
00:02:16,000 --> 00:02:21,000
we just requested this information 5

74
00:02:19,000 --> 00:02:22,000
seconds ago so that's where react query

75
00:02:21,000 --> 00:02:24,000
comes into play so let's actually

76
00:02:22,000 --> 00:02:26,000
replace this with react query all right

77
00:02:24,000 --> 00:02:28,000
so I have commented this out and I

78
00:02:26,000 --> 00:02:30,000
replaced all of that with react query

79
00:02:28,000 --> 00:02:33,000
here so with react quer you get the use

80
00:02:30,000 --> 00:02:35,000
Query hook and it will give you the data

81
00:02:33,000 --> 00:02:37,000
and an is loading flag as well so with

82
00:02:35,000 --> 00:02:40,000
react query um there's three arguments

83
00:02:37,000 --> 00:02:43,000
here that will specify so this ID is

84
00:02:40,000 --> 00:02:44,000
like a caching key the second part is

85
00:02:43,000 --> 00:02:46,000
the actual data fetching right so with

86
00:02:44,000 --> 00:02:48,000
react query you still have to specify

87
00:02:46,000 --> 00:02:49,000
how you want to do the actual data

88
00:02:48,000 --> 00:02:51,000
fetching and then how long it should be

89
00:02:49,000 --> 00:02:54,000
cached so what's the benefit of doing

90
00:02:51,000 --> 00:02:56,000
this well if I now save here and now uh

91
00:02:54,000 --> 00:02:57,000
Let me refresh here for a clean slate

92
00:02:56,000 --> 00:02:59,000
all right so now we see the first one

93
00:02:57,000 --> 00:03:01,000
here what if I click on the second one

94
00:02:59,000 --> 00:03:03,000
well it's going to fetch initially it

95
00:03:01,000 --> 00:03:05,000
has to fetch the data right but what

96
00:03:03,000 --> 00:03:07,000
happens now if we go back to the first

97
00:03:05,000 --> 00:03:09,000
one you can see that was instant right

98
00:03:07,000 --> 00:03:11,000
if I now click on the second one you can

99
00:03:09,000 --> 00:03:13,000
see that's instant there is no loading

100
00:03:11,000 --> 00:03:15,000
State now I can click around between

101
00:03:13,000 --> 00:03:18,000
these two because they have already been

102
00:03:15,000 --> 00:03:21,000
fetched once and react query knows that

103
00:03:18,000 --> 00:03:23,000
if it's an ID that it has seen before

104
00:03:21,000 --> 00:03:25,000
right which is why we keep track of it

105
00:03:23,000 --> 00:03:27,000
in here it can see that when you pass in

106
00:03:25,000 --> 00:03:29,000
an ID and it's an ID that we have

107
00:03:27,000 --> 00:03:30,000
already fetched for before react query

108
00:03:29,000 --> 00:03:33,000
knows uh we already did this data

109
00:03:30,000 --> 00:03:35,000
fetching for ID number five let's say so

110
00:03:33,000 --> 00:03:36,000
we're not going to run all of this again

111
00:03:35,000 --> 00:03:38,000
I'm just going to give you the data from

112
00:03:36,000 --> 00:03:40,000
that number five from before so that's

113
00:03:38,000 --> 00:03:42,000
called caching and let me show you that

114
00:03:40,000 --> 00:03:44,000
in a network tab as well so if I click

115
00:03:42,000 --> 00:03:45,000
on the last one here in the list you can

116
00:03:44,000 --> 00:03:47,000
see there is a network request here and

117
00:03:45,000 --> 00:03:49,000
there's no way around it initially you

118
00:03:47,000 --> 00:03:51,000
need to actually fetch the data and now

119
00:03:49,000 --> 00:03:52,000
let's say I click on the one uh on top

120
00:03:51,000 --> 00:03:54,000
of that so there's another Network

121
00:03:52,000 --> 00:03:56,000
request okay it's the first time so

122
00:03:54,000 --> 00:03:58,000
you're going to have to get the data but

123
00:03:56,000 --> 00:04:00,000
what happens now if we click on the last

124
00:03:58,000 --> 00:04:02,000
one again you can can see I clicked

125
00:04:00,000 --> 00:04:05,000
there there was no new network request

126
00:04:02,000 --> 00:04:07,000
if I click on the one above it you can

127
00:04:05,000 --> 00:04:09,000
see there is no new network request I

128
00:04:07,000 --> 00:04:11,000
can I can click back and forth between

129
00:04:09,000 --> 00:04:14,000
them there are no new network requests

130
00:04:11,000 --> 00:04:17,000
because react query caches these job

131
00:04:14,000 --> 00:04:18,000
items um when we fetch them now react

132
00:04:17,000 --> 00:04:20,000
query can do many other things but I

133
00:04:18,000 --> 00:04:22,000
would argue that this was the main

134
00:04:20,000 --> 00:04:24,000
reason we were using react query and

135
00:04:22,000 --> 00:04:26,000
this is still how I would do it in a

136
00:04:24,000 --> 00:04:28,000
react feat app right so remote Dev is a

137
00:04:26,000 --> 00:04:30,000
react feat app and in a feat app I would

138
00:04:28,000 --> 00:04:32,000
still use re react query all right so

139
00:04:30,000 --> 00:04:35,000
that's for feed right nothing really

140
00:04:32,000 --> 00:04:36,000
changes for react feed apps or create

141
00:04:35,000 --> 00:04:38,000
react app in case you're still using

142
00:04:36,000 --> 00:04:40,000
that right so that all states the same

143
00:04:38,000 --> 00:04:42,000
now in nextjs I would argue things

144
00:04:40,000 --> 00:04:45,000
change a little bit so here I actually

145
00:04:42,000 --> 00:04:47,000
converted the same app to uh the nextjs

146
00:04:45,000 --> 00:04:49,000
framework so here it's the same app all

147
00:04:47,000 --> 00:04:50,000
the same features and you can see when I

148
00:04:49,000 --> 00:04:52,000
click on the second one you can see

149
00:04:50,000 --> 00:04:53,000
there's a loading indicator there and if

150
00:04:52,000 --> 00:04:56,000
I click on the third one there is a

151
00:04:53,000 --> 00:04:58,000
loading indicator but what happens now

152
00:04:56,000 --> 00:05:00,000
if I click on the second one the one

153
00:04:58,000 --> 00:05:02,000
that we just saw that we already fetch

154
00:05:00,000 --> 00:05:04,000
the data off you can see it's instant

155
00:05:02,000 --> 00:05:06,000
when I click here it's instant right so

156
00:05:04,000 --> 00:05:09,000
these first three I already fetched

157
00:05:06,000 --> 00:05:10,000
their data so the next time I come back

158
00:05:09,000 --> 00:05:13,000
to them I'm there's not going to be a

159
00:05:10,000 --> 00:05:15,000
new network request because nextjs

160
00:05:13,000 --> 00:05:17,000
actually caches that for me so let me

161
00:05:15,000 --> 00:05:20,000
show you how it looks like in nextjs so

162
00:05:17,000 --> 00:05:22,000
in nextjs we do not use use effect we

163
00:05:20,000 --> 00:05:24,000
can actually make it async and then you

164
00:05:22,000 --> 00:05:26,000
can do the data fetching directly here

165
00:05:24,000 --> 00:05:28,000
in the component function body and then

166
00:05:26,000 --> 00:05:30,000
if you do it like this next as will

167
00:05:28,000 --> 00:05:31,000
automatically cash all of this and let

168
00:05:30,000 --> 00:05:33,000
me prove that to you in the network tab

169
00:05:31,000 --> 00:05:35,000
as well if I go to the second page here

170
00:05:33,000 --> 00:05:37,000
let's say I pick the first one here you

171
00:05:35,000 --> 00:05:38,000
can see there is an initial Network

172
00:05:37,000 --> 00:05:40,000
request if I click on the second one

173
00:05:38,000 --> 00:05:41,000
here there is there are actually two

174
00:05:40,000 --> 00:05:43,000
Network requests we can ignore that but

175
00:05:41,000 --> 00:05:44,000
you can see there is a network request

176
00:05:43,000 --> 00:05:46,000
for every click what happens now if I go

177
00:05:44,000 --> 00:05:48,000
back to that first one that I just

178
00:05:46,000 --> 00:05:50,000
clicked if I click on that one you can

179
00:05:48,000 --> 00:05:52,000
see it's instant there is no new network

180
00:05:50,000 --> 00:05:54,000
request if I click on the other one you

181
00:05:52,000 --> 00:05:56,000
can see it's also instant there is no

182
00:05:54,000 --> 00:05:59,000
new network request because nextjs

183
00:05:56,000 --> 00:06:01,000
automatically caches your fetch request

184
00:05:59,000 --> 00:06:03,000
actually and how do we get the loading

185
00:06:01,000 --> 00:06:04,000
State like we got with react query

186
00:06:03,000 --> 00:06:06,000
though because if you look here you can

187
00:06:04,000 --> 00:06:08,000
see we are still getting this spinner

188
00:06:06,000 --> 00:06:09,000
here so how do you get that loading

189
00:06:08,000 --> 00:06:11,000
State actually the loading State Works a

190
00:06:09,000 --> 00:06:14,000
little bit differently so on the page in

191
00:06:11,000 --> 00:06:16,000
a nextjs project so here on the page

192
00:06:14,000 --> 00:06:18,000
component here is that component that's

193
00:06:16,000 --> 00:06:20,000
actually doing the data fetching I can

194
00:06:18,000 --> 00:06:23,000
wrap it in a suspense and then you can

195
00:06:20,000 --> 00:06:26,000
specify a fall back so while the async

196
00:06:23,000 --> 00:06:28,000
component is suspended right you can see

197
00:06:26,000 --> 00:06:30,000
right while this is going on it will

198
00:06:28,000 --> 00:06:32,000
render the f back here and this is the

199
00:06:30,000 --> 00:06:34,000
component that actually shows a loading

200
00:06:32,000 --> 00:06:36,000
spinner right so you can see here there

201
00:06:34,000 --> 00:06:39,000
is a spinner in here right make sure you

202
00:06:36,000 --> 00:06:41,000
add a key prop to the suspense so that

203
00:06:39,000 --> 00:06:43,000
every time the ID changes the suspense

204
00:06:41,000 --> 00:06:45,000
is triggered again very common Pitfall

205
00:06:43,000 --> 00:06:47,000
actually right so next you ask comes

206
00:06:45,000 --> 00:06:49,000
with built-in caching so that's why I

207
00:06:47,000 --> 00:06:51,000
don't use react query for data fetching

208
00:06:49,000 --> 00:06:53,000
in nextjs right so nextjs is very

209
00:06:51,000 --> 00:06:55,000
aggressively cached actually so it will

210
00:06:53,000 --> 00:06:58,000
actually automatically cach the result

211
00:06:55,000 --> 00:07:00,000
of this fetch call this individual fetch

212
00:06:58,000 --> 00:07:01,000
call whatever result of that is it will

213
00:07:00,000 --> 00:07:04,000
actually cash that and that's actually

214
00:07:01,000 --> 00:07:07,000
the most powerful cache in nextjs this

215
00:07:04,000 --> 00:07:10,000
will persist even throughout deployment

216
00:07:07,000 --> 00:07:11,000
and nextd S also caches the result of

217
00:07:10,000 --> 00:07:13,000
this render right so your server

218
00:07:11,000 --> 00:07:16,000
components this is your server component

219
00:07:13,000 --> 00:07:18,000
the result of this render is a so-called

220
00:07:16,000 --> 00:07:20,000
RSC payload react server component

221
00:07:18,000 --> 00:07:22,000
payload so basically the render result

222
00:07:20,000 --> 00:07:25,000
the render result itself is also

223
00:07:22,000 --> 00:07:27,000
separately cached and there is also a

224
00:07:25,000 --> 00:07:29,000
client side cache that nextjs manages

225
00:07:27,000 --> 00:07:32,000
for us and that's actually why it's so

226
00:07:29,000 --> 00:07:34,000
Snappy here because as I click around it

227
00:07:32,000 --> 00:07:35,000
will actually use that client side cache

228
00:07:34,000 --> 00:07:37,000
right so it will not make new network

229
00:07:35,000 --> 00:07:39,000
requests to the back end because it can

230
00:07:37,000 --> 00:07:41,000
see that we're requesting something that

231
00:07:39,000 --> 00:07:43,000
has already been requested before right

232
00:07:41,000 --> 00:07:45,000
so those are the three main caches in

233
00:07:43,000 --> 00:07:48,000
nextjs now if you use the nextjs link

234
00:07:45,000 --> 00:07:50,000
component which we actually do use here

235
00:07:48,000 --> 00:07:52,000
in that in that list so for every item

236
00:07:50,000 --> 00:07:54,000
in that list it's wrapped in this link

237
00:07:52,000 --> 00:07:56,000
component where it will actually specify

238
00:07:54,000 --> 00:07:59,000
what needs to happen to the URL when you

239
00:07:56,000 --> 00:08:01,000
click on it this is actually prefetched

240
00:07:59,000 --> 00:08:03,000
so as these links come into the viewport

241
00:08:01,000 --> 00:08:04,000
nexts will automatically prefetch that

242
00:08:03,000 --> 00:08:06,000
for me behind the scenes so then when

243
00:08:04,000 --> 00:08:08,000
you click it there won't even be a

244
00:08:06,000 --> 00:08:10,000
loading state it will be instant now

245
00:08:08,000 --> 00:08:12,000
here we still get a loading State

246
00:08:10,000 --> 00:08:13,000
because I'm in development here so that

247
00:08:12,000 --> 00:08:16,000
link component prefetching is only

248
00:08:13,000 --> 00:08:18,000
enabled in production mode that's nextjs

249
00:08:16,000 --> 00:08:20,000
is very aggressively cached and that's

250
00:08:18,000 --> 00:08:22,000
why I don't use react query in nextjs

251
00:08:20,000 --> 00:08:23,000
however sometimes you still need to do

252
00:08:22,000 --> 00:08:25,000
client side fetching right so there are

253
00:08:23,000 --> 00:08:26,000
still some edge cases where you where

254
00:08:25,000 --> 00:08:29,000
you actually want to do client side

255
00:08:26,000 --> 00:08:31,000
fetching in that case the fetch API for

256
00:08:29,000 --> 00:08:32,000
example is not automatically cached

257
00:08:31,000 --> 00:08:34,000
right so this is only automatically

258
00:08:32,000 --> 00:08:36,000
cached on the server so if you do client

259
00:08:34,000 --> 00:08:38,000
side fetching you may still want to use

260
00:08:36,000 --> 00:08:40,000
react query and usually that's the case

261
00:08:38,000 --> 00:08:42,000
when you want to fetch data after a user

262
00:08:40,000 --> 00:08:44,000
action for example infinite scroll right

263
00:08:42,000 --> 00:08:46,000
so the user first has to scroll and then

264
00:08:44,000 --> 00:08:47,000
you want to fetch data well you may want

265
00:08:46,000 --> 00:08:49,000
to look into react query or you want to

266
00:08:47,000 --> 00:08:51,000
do things like polling and some other

267
00:08:49,000 --> 00:08:53,000
things in that case you may still want

268
00:08:51,000 --> 00:08:54,000
to use react query in nextjs but

269
00:08:53,000 --> 00:08:56,000
generally I don't use react query in

270
00:08:54,000 --> 00:08:59,000
next J all right so what about trpc

271
00:08:56,000 --> 00:09:01,000
let's go back to our feat example so TR

272
00:08:59,000 --> 00:09:03,000
RPC is for client server communication

273
00:09:01,000 --> 00:09:06,000
making that type safe so let's actually

274
00:09:03,000 --> 00:09:08,000
go back to this example of fetching data

275
00:09:06,000 --> 00:09:11,000
without react query just the traditional

276
00:09:08,000 --> 00:09:12,000
way right so we just use use effect here

277
00:09:11,000 --> 00:09:13,000
this is how you would do it

278
00:09:12,000 --> 00:09:14,000
traditionally you would fetch the data

279
00:09:13,000 --> 00:09:17,000
like this now one of the problems with

280
00:09:14,000 --> 00:09:20,000
this is when we get data back here if

281
00:09:17,000 --> 00:09:22,000
you hover data you can see it is typed

282
00:09:20,000 --> 00:09:24,000
as any and we don't want to have anyes

283
00:09:22,000 --> 00:09:25,000
in our codebase because any means

284
00:09:24,000 --> 00:09:28,000
anything goes typescript should warn me

285
00:09:25,000 --> 00:09:30,000
here hey this method does not exist but

286
00:09:28,000 --> 00:09:31,000
as you can see because it's as any well

287
00:09:30,000 --> 00:09:33,000
you can do anything this is not type

288
00:09:31,000 --> 00:09:35,000
safe so the main problem here is you

289
00:09:33,000 --> 00:09:36,000
don't have a good type here another

290
00:09:35,000 --> 00:09:39,000
problem is of course you need to

291
00:09:36,000 --> 00:09:41,000
remember the actual URL of the end point

292
00:09:39,000 --> 00:09:43,000
that you're making that request to right

293
00:09:41,000 --> 00:09:45,000
so this is not a robust way of

294
00:09:43,000 --> 00:09:47,000
communicating with a back end all right

295
00:09:45,000 --> 00:09:49,000
so then here I have an example of trpc

296
00:09:47,000 --> 00:09:50,000
so you have to do some setup there is a

297
00:09:49,000 --> 00:09:52,000
little bit of a boiler plate here but

298
00:09:50,000 --> 00:09:54,000
the benefit is now I don't have to

299
00:09:52,000 --> 00:09:57,000
remember the end point I can just use

300
00:09:54,000 --> 00:10:00,000
trpc I can see what I have available

301
00:09:57,000 --> 00:10:02,000
trpc oh I have a job python by ID method

302
00:10:00,000 --> 00:10:04,000
on here and what do we want to do with

303
00:10:02,000 --> 00:10:05,000
that well I just want to get data that's

304
00:10:04,000 --> 00:10:08,000
called a query and actually I need to

305
00:10:05,000 --> 00:10:10,000
pass some value to the endpoint if I

306
00:10:08,000 --> 00:10:13,000
forget that typescript warns me here so

307
00:10:10,000 --> 00:10:15,000
I get a warning here I need to specify

308
00:10:13,000 --> 00:10:18,000
an input right if I pass in the wrong

309
00:10:15,000 --> 00:10:20,000
input of a number type let's say I even

310
00:10:18,000 --> 00:10:21,000
get a warning it should be a string

311
00:10:20,000 --> 00:10:24,000
right so I'm just going to pass that ID

312
00:10:21,000 --> 00:10:25,000
so I'm getting a job item by its ID now

313
00:10:24,000 --> 00:10:28,000
the main benefit here is now when I

314
00:10:25,000 --> 00:10:31,000
hover data you can see I'm getting the

315
00:10:28,000 --> 00:10:33,000
actual type right so here now I get the

316
00:10:31,000 --> 00:10:35,000
actual type so now if I make a mistake

317
00:10:33,000 --> 00:10:37,000
on this and I think I can call some

318
00:10:35,000 --> 00:10:39,000
method typescript will actually warn me

319
00:10:37,000 --> 00:10:41,000
right and I can fix my mistake so now

320
00:10:39,000 --> 00:10:43,000
this return value is properly typed and

321
00:10:41,000 --> 00:10:45,000
another benefit is of course I don't

322
00:10:43,000 --> 00:10:46,000
have to remember the actual URL of the

323
00:10:45,000 --> 00:10:49,000
endpoint right so I can just use some

324
00:10:46,000 --> 00:10:51,000
trpc object here and tapescript will

325
00:10:49,000 --> 00:10:52,000
provide intelligence here to see what I

326
00:10:51,000 --> 00:10:54,000
can do with that all right so then let's

327
00:10:52,000 --> 00:10:58,000
go back to next JS how do we get those

328
00:10:54,000 --> 00:11:00,000
same benefits without using trpc so trpc

329
00:10:58,000 --> 00:11:03,000
is for when you control both the client

330
00:11:00,000 --> 00:11:04,000
side as well as the server side right so

331
00:11:03,000 --> 00:11:06,000
realistically you're not going to do a

332
00:11:04,000 --> 00:11:08,000
fetch call to some third party API most

333
00:11:06,000 --> 00:11:10,000
of the time typically you're going to

334
00:11:08,000 --> 00:11:12,000
get this type of data from your own

335
00:11:10,000 --> 00:11:14,000
database and you're going to use an OM

336
00:11:12,000 --> 00:11:17,000
right so here for example with Prisma if

337
00:11:14,000 --> 00:11:19,000
I get the job item by ID if I now hover

338
00:11:17,000 --> 00:11:22,000
the data you can see I already get this

339
00:11:19,000 --> 00:11:24,000
correct type and I also don't have to

340
00:11:22,000 --> 00:11:27,000
remember some URL right so for getting

341
00:11:24,000 --> 00:11:29,000
data I don't need to use trpc to get

342
00:11:27,000 --> 00:11:31,000
these benefits server component allow me

343
00:11:29,000 --> 00:11:33,000
to use Prisma directly here right so

344
00:11:31,000 --> 00:11:35,000
with server components in xjs and your

345
00:11:33,000 --> 00:11:37,000
omm you already will get the correct

346
00:11:35,000 --> 00:11:39,000
type here right so to get those benefits

347
00:11:37,000 --> 00:11:41,000
for getting data you don't need to use

348
00:11:39,000 --> 00:11:43,000
trpc all right so that was for getting

349
00:11:41,000 --> 00:11:45,000
data now what about mutations right

350
00:11:43,000 --> 00:11:47,000
basically your postp put and delete

351
00:11:45,000 --> 00:11:49,000
request well if you have some kind of

352
00:11:47,000 --> 00:11:52,000
form let's say and when you submit the

353
00:11:49,000 --> 00:11:53,000
form you want to add let's say a job

354
00:11:52,000 --> 00:11:56,000
item to the database right so what you

355
00:11:53,000 --> 00:11:58,000
would do typically before trpc again you

356
00:11:56,000 --> 00:12:01,000
had to sort of guess the URL for the

357
00:11:58,000 --> 00:12:04,000
endpoint and here you need to pass the

358
00:12:01,000 --> 00:12:07,000
actual data but how do you know the

359
00:12:04,000 --> 00:12:09,000
specific data or format and here I don't

360
00:12:07,000 --> 00:12:11,000
get any intelligence here right I don't

361
00:12:09,000 --> 00:12:13,000
get any relevant intelligence here so I

362
00:12:11,000 --> 00:12:15,000
don't really know what to pass exactly

363
00:12:13,000 --> 00:12:17,000
I'm just kind of guessing here also if I

364
00:12:15,000 --> 00:12:19,000
get any return value let's say an error

365
00:12:17,000 --> 00:12:21,000
or something like that right so if I get

366
00:12:19,000 --> 00:12:23,000
any return value here you don't get this

367
00:12:21,000 --> 00:12:25,000
properly typed you're going to get some

368
00:12:23,000 --> 00:12:27,000
any type as we saw before all right so

369
00:12:25,000 --> 00:12:29,000
what if we want to do the same with trpc

370
00:12:27,000 --> 00:12:30,000
well you can use that trpc object so I

371
00:12:29,000 --> 00:12:32,000
can use intelligence here to see the

372
00:12:30,000 --> 00:12:35,000
options I have here so I don't have to

373
00:12:32,000 --> 00:12:37,000
guess the the endpoint URL I can see

374
00:12:35,000 --> 00:12:39,000
there is some option to create a job

375
00:12:37,000 --> 00:12:41,000
item and I want to do a mutation so I

376
00:12:39,000 --> 00:12:43,000
can do M mutate and then here I can pass

377
00:12:41,000 --> 00:12:45,000
the data how do I know what data to pass

378
00:12:43,000 --> 00:12:47,000
typescript tells me here so the input

379
00:12:45,000 --> 00:12:49,000
needs to be an object with a title and

380
00:12:47,000 --> 00:12:51,000
description right so here I can see what

381
00:12:49,000 --> 00:12:53,000
I need to pass right so description and

382
00:12:51,000 --> 00:12:55,000
title if I make a mistake if I make it a

383
00:12:53,000 --> 00:12:57,000
number I get a warning here from

384
00:12:55,000 --> 00:12:59,000
typescript so you can see all of this is

385
00:12:57,000 --> 00:13:01,000
properly typed including any return

386
00:12:59,000 --> 00:13:03,000
value I may get if I hover data you can

387
00:13:01,000 --> 00:13:05,000
see data is going to be of this

388
00:13:03,000 --> 00:13:06,000
particular shape right so with trpc you

389
00:13:05,000 --> 00:13:08,000
get that very nice types saave client

390
00:13:06,000 --> 00:13:11,000
server communication all right so then

391
00:13:08,000 --> 00:13:13,000
why not use trpc in nextjs well nextjs

392
00:13:11,000 --> 00:13:15,000
has another major Innovation and maybe

393
00:13:13,000 --> 00:13:17,000
this is even the biggest one which is

394
00:13:15,000 --> 00:13:20,000
server actions so server actions are

395
00:13:17,000 --> 00:13:22,000
meant to mutate data on the server so

396
00:13:20,000 --> 00:13:24,000
instead of using the onsubmit event

397
00:13:22,000 --> 00:13:25,000
handler you would actually use the

398
00:13:24,000 --> 00:13:27,000
action attribute and then here you can

399
00:13:25,000 --> 00:13:30,000
invoke a server action so I actually

400
00:13:27,000 --> 00:13:31,000
created a server called create job item

401
00:13:30,000 --> 00:13:33,000
I actually put that in a separate file

402
00:13:31,000 --> 00:13:35,000
we'll take a look at that in a second I

403
00:13:33,000 --> 00:13:37,000
could technically also Define it in here

404
00:13:35,000 --> 00:13:39,000
if I wanted to but I like to put them in

405
00:13:37,000 --> 00:13:41,000
a separate file I can also do uh create

406
00:13:39,000 --> 00:13:43,000
job item right I don't have to remember

407
00:13:41,000 --> 00:13:45,000
a URL if I don't pass anything

408
00:13:43,000 --> 00:13:47,000
typescript will warn me actually right

409
00:13:45,000 --> 00:13:49,000
so it expects an argument here I know I

410
00:13:47,000 --> 00:13:51,000
need to specify an argument here and

411
00:13:49,000 --> 00:13:53,000
then here also you can see I'm getting

412
00:13:51,000 --> 00:13:54,000
intelligence here so TP is telling me

413
00:13:53,000 --> 00:13:56,000
hey you need to pass description and

414
00:13:54,000 --> 00:13:59,000
title right so here I can say title if I

415
00:13:56,000 --> 00:14:01,000
make a type mistake again you can see

416
00:13:59,000 --> 00:14:02,000
I'm passing a number here I get a

417
00:14:01,000 --> 00:14:04,000
warning here right so here you can see

418
00:14:02,000 --> 00:14:07,000
type number is incorrect I can fix my

419
00:14:04,000 --> 00:14:09,000
mistake right so with server actions I

420
00:14:07,000 --> 00:14:11,000
also get that intelligence I don't need

421
00:14:09,000 --> 00:14:14,000
to remember some URL endpoint and if

422
00:14:11,000 --> 00:14:16,000
this returns anything if we uh get

423
00:14:14,000 --> 00:14:17,000
something back here if I hover a result

424
00:14:16,000 --> 00:14:19,000
you can see this has been automatically

425
00:14:17,000 --> 00:14:21,000
inferred by typescript and so these

426
00:14:19,000 --> 00:14:23,000
server actions you can call them from

427
00:14:21,000 --> 00:14:24,000
anywhere from the client side server

428
00:14:23,000 --> 00:14:27,000
side and so these server actions you can

429
00:14:24,000 --> 00:14:29,000
invoke them anywhere and they provide

430
00:14:27,000 --> 00:14:31,000
the same benefits and so the server

431
00:14:29,000 --> 00:14:33,000
actions are very similar to just normal

432
00:14:31,000 --> 00:14:35,000
local functions right and typescript can

433
00:14:33,000 --> 00:14:37,000
infer whatever you return from that

434
00:14:35,000 --> 00:14:39,000
function it can infer what you are

435
00:14:37,000 --> 00:14:40,000
returning and so then here as a result

436
00:14:39,000 --> 00:14:42,000
we get that type so let's actually take

437
00:14:40,000 --> 00:14:44,000
a look at how we Implement a server

438
00:14:42,000 --> 00:14:45,000
action like that so I like to put them

439
00:14:44,000 --> 00:14:47,000
in a separate file I don't want to have

440
00:14:45,000 --> 00:14:48,000
them lingering around in some components

441
00:14:47,000 --> 00:14:51,000
they're very important functions

442
00:14:48,000 --> 00:14:53,000
actually so I want to have a dedicated

443
00:14:51,000 --> 00:14:54,000
place for them in my code base so with

444
00:14:53,000 --> 00:14:56,000
us server at the top of the file every

445
00:14:54,000 --> 00:14:58,000
function in here becomes a so-called

446
00:14:56,000 --> 00:15:00,000
server action so here I have my server

447
00:14:58,000 --> 00:15:02,000
action here I Define the input right so

448
00:15:00,000 --> 00:15:04,000
you need to pass a new job item and it

449
00:15:02,000 --> 00:15:06,000
should be an object with title and

450
00:15:04,000 --> 00:15:08,000
description just like how you would

451
00:15:06,000 --> 00:15:09,000
specify normal function with its

452
00:15:08,000 --> 00:15:11,000
parameters right so you would give a

453
00:15:09,000 --> 00:15:13,000
name for the parameter and then the type

454
00:15:11,000 --> 00:15:15,000
and whatever type you specify here that

455
00:15:13,000 --> 00:15:17,000
will automatically be uh suggested here

456
00:15:15,000 --> 00:15:19,000
when you try to use it right so here we

457
00:15:17,000 --> 00:15:20,000
got the intelligence because I have

458
00:15:19,000 --> 00:15:22,000
typed this here I didn't need to do

459
00:15:20,000 --> 00:15:25,000
anything else since surf actions are

460
00:15:22,000 --> 00:15:27,000
basically like post API endpoints next s

461
00:15:25,000 --> 00:15:29,000
behind the scenes will actually make a

462
00:15:27,000 --> 00:15:31,000
post request to uh the back end and

463
00:15:29,000 --> 00:15:33,000
since we cannot trust anything coming

464
00:15:31,000 --> 00:15:35,000
from the client we do want to validate

465
00:15:33,000 --> 00:15:37,000
that whatever we get here that this is

466
00:15:35,000 --> 00:15:38,000
actually of the shape that should be

467
00:15:37,000 --> 00:15:40,000
right so if we pass something that's not

468
00:15:38,000 --> 00:15:42,000
of the correct shape we are actually

469
00:15:40,000 --> 00:15:43,000
returning something here from this

470
00:15:42,000 --> 00:15:45,000
function just like you would return

471
00:15:43,000 --> 00:15:47,000
something from a normal local function

472
00:15:45,000 --> 00:15:49,000
and whatever you return here this is

473
00:15:47,000 --> 00:15:51,000
also what you will get here as the type

474
00:15:49,000 --> 00:15:53,000
right so types skit will just give you

475
00:15:51,000 --> 00:15:55,000
that type right so it could be this type

476
00:15:53,000 --> 00:15:56,000
in case there is a validation problem

477
00:15:55,000 --> 00:15:58,000
right and then we can do the actual

478
00:15:56,000 --> 00:16:01,000
mutation in our database and then with

479
00:15:58,000 --> 00:16:03,000
revalidate we can update the UI in the

480
00:16:01,000 --> 00:16:05,000
same network request I have other videos

481
00:16:03,000 --> 00:16:07,000
and server action so we can't spend too

482
00:16:05,000 --> 00:16:09,000
much time on them but you can see that

483
00:16:07,000 --> 00:16:11,000
we get the same results here with just

484
00:16:09,000 --> 00:16:13,000
using server actions there is no

485
00:16:11,000 --> 00:16:14,000
additional boilerplate required to make

486
00:16:13,000 --> 00:16:16,000
all of that type safety work server

487
00:16:14,000 --> 00:16:18,000
actions also have some additional

488
00:16:16,000 --> 00:16:20,000
benefit for example here in forms they

489
00:16:18,000 --> 00:16:22,000
provide Progressive enhancement which is

490
00:16:20,000 --> 00:16:25,000
a very fancy word but it means that if

491
00:16:22,000 --> 00:16:27,000
you just specify the server action like

492
00:16:25,000 --> 00:16:29,000
this this will actually work without any

493
00:16:27,000 --> 00:16:31,000
JavaScript enabled and if you actually

494
00:16:29,000 --> 00:16:32,000
do provide some more code like what we

495
00:16:31,000 --> 00:16:34,000
we're doing here and maybe here you also

496
00:16:32,000 --> 00:16:35,000
want to have maybe a toast message in

497
00:16:34,000 --> 00:16:37,000
case there is an error if you do it like

498
00:16:35,000 --> 00:16:39,000
that it will actually need JavaScript

499
00:16:37,000 --> 00:16:42,000
but then still this form will be

500
00:16:39,000 --> 00:16:44,000
prioritized in hydration and the server

501
00:16:42,000 --> 00:16:46,000
actions are also integrated with some

502
00:16:44,000 --> 00:16:48,000
powerful hooks like use form status to

503
00:16:46,000 --> 00:16:50,000
get a pending State and also use

504
00:16:48,000 --> 00:16:53,000
optimistic to get optimistic UI one

505
00:16:50,000 --> 00:16:55,000
downside here is I did type it as an

506
00:16:53,000 --> 00:16:57,000
object like this realistically like I

507
00:16:55,000 --> 00:16:58,000
just said we don't really know what we

508
00:16:57,000 --> 00:17:00,000
get here you cannot trust any anything

509
00:16:58,000 --> 00:17:02,000
coming from the client and with

510
00:17:00,000 --> 00:17:04,000
typescript you do want to be as precise

511
00:17:02,000 --> 00:17:08,000
as possible so a more precise type for

512
00:17:04,000 --> 00:17:09,000
this input is actually unnown we don't

513
00:17:08,000 --> 00:17:11,000
really know what we're going to get this

514
00:17:09,000 --> 00:17:13,000
would be a more precise type and then

515
00:17:11,000 --> 00:17:14,000
you need to validate it with for example

516
00:17:13,000 --> 00:17:16,000
zot which is actually very similar to

517
00:17:14,000 --> 00:17:18,000
how you would do it in trpc as well so

518
00:17:16,000 --> 00:17:20,000
that doesn't change you would run it

519
00:17:18,000 --> 00:17:22,000
through some schema first and then once

520
00:17:20,000 --> 00:17:24,000
that is successful uh you would use that

521
00:17:22,000 --> 00:17:28,000
variable right so then you would use

522
00:17:24,000 --> 00:17:29,000
validated job item. dat. tile. data and

523
00:17:28,000 --> 00:17:31,000
then here here you also get the proper

524
00:17:29,000 --> 00:17:33,000
type right so after validation you do

525
00:17:31,000 --> 00:17:35,000
get the right type here on the backend

526
00:17:33,000 --> 00:17:37,000
side now the downside of doing this is

527
00:17:35,000 --> 00:17:39,000
now when you use the server action since

528
00:17:37,000 --> 00:17:41,000
it's typed as unknown we don't really

529
00:17:39,000 --> 00:17:43,000
know what we need to pass here right so

530
00:17:41,000 --> 00:17:45,000
now we lose that intelligence so that's

531
00:17:43,000 --> 00:17:46,000
one downside if you properly type it you

532
00:17:45,000 --> 00:17:49,000
do lose the intelligence now there are

533
00:17:46,000 --> 00:17:51,000
some rapper libraries that will fix that

534
00:17:49,000 --> 00:17:53,000
so my guess is that we will get some

535
00:17:51,000 --> 00:17:55,000
rapper library for Server actions that

536
00:17:53,000 --> 00:17:57,000
that will fix some of its downsides now

537
00:17:55,000 --> 00:17:59,000
one major downside of server actions

538
00:17:57,000 --> 00:18:01,000
that is going to be hard to to fix is

539
00:17:59,000 --> 00:18:03,000
that you cannot easily use them outside

540
00:18:01,000 --> 00:18:05,000
nextjs so if you also want to support

541
00:18:03,000 --> 00:18:07,000
let's say a react native mobile app

542
00:18:05,000 --> 00:18:09,000
client you can't use these server

543
00:18:07,000 --> 00:18:11,000
actions so if your plan is to support

544
00:18:09,000 --> 00:18:14,000
clients outside nextjs you may want to

545
00:18:11,000 --> 00:18:16,000
stick to trpc so if you're a little bit

546
00:18:14,000 --> 00:18:18,000
confused by now completely normal nextjs

547
00:18:16,000 --> 00:18:19,000
has really changed the landscape of web

548
00:18:18,000 --> 00:18:22,000
development in my opinion if you want to

549
00:18:19,000 --> 00:18:23,000
master latest react and nextjs I highly

550
00:18:22,000 --> 00:18:25,000
recommend you go through my professional

551
00:18:23,000 --> 00:18:27,000
react and nextjs course in which we

552
00:18:25,000 --> 00:18:29,000
start from absolute scratch and by the

553
00:18:27,000 --> 00:18:31,000
end we're building some really cutting

554
00:18:29,000 --> 00:18:33,000
edge nextjs applications you can find

555
00:18:31,000 --> 00:18:35,000
the link in the description so just to

556
00:18:33,000 --> 00:18:38,000
sum up this video I would still use

557
00:18:35,000 --> 00:18:41,000
react query and trpc in a react feed app

558
00:18:38,000 --> 00:18:42,000
for example but in a nextjs application

559
00:18:41,000 --> 00:18:45,000
I'm probably not going to use react

560
00:18:42,000 --> 00:18:47,000
query or trpc I'm doing some client side

561
00:18:45,000 --> 00:18:49,000
data fetching in some Edge case in which

562
00:18:47,000 --> 00:18:51,000
case I would use react query or I'm

563
00:18:49,000 --> 00:18:54,000
planning on supporting clients outside

564
00:18:51,000 --> 00:18:55,000
nextjs in which case I would use trpc

565
00:18:54,000 --> 00:18:56,000
for my endpoints thanks for watching

566
00:18:55,000 --> 00:18:59,000
this video and I hope to see you the

567
00:18:56,000 --> 00:18:59,000
next one bye

